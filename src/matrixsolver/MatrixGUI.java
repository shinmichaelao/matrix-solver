/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package matrixsolver;

import javax.swing.text.*;
import java.util.*;



public class MatrixGUI extends javax.swing.JFrame {

    public static Matrix storedMatrix = null;
    public static String matrixInfo = "";
    public static String solveText = "";
    public static boolean solvable = false;
    
    public MatrixGUI() {
        this.setTitle("CEASES");
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        matrixDialog1 = new matrixsolver.MatrixDialog();
        jTabbedPane3 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        enterMatrixButton = new javax.swing.JButton();
        solveButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextPane1 = new javax.swing.JTextPane();
        jCheckBox1 = new javax.swing.JCheckBox();
        jLabel1 = new javax.swing.JLabel();
        jCheckBox2 = new javax.swing.JCheckBox();
        jPanel2 = new javax.swing.JPanel();
        leftTextField = new javax.swing.JTextField();
        rightTextField = new javax.swing.JTextField();
        balanceButton = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();

        matrixDialog1.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentHidden(java.awt.event.ComponentEvent evt) {
                matrixDialog1ComponentHidden(evt);
            }
        });

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        enterMatrixButton.setText("Enter System of Equations");
        enterMatrixButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                enterMatrixButtonActionPerformed(evt);
            }
        });

        solveButton.setText("Solve System");
        solveButton.setEnabled(false);
        solveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                solveButtonActionPerformed(evt);
            }
        });

        jTextPane1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jTextPane1.setEnabled(false);
        jScrollPane2.setViewportView(jTextPane1);

        jScrollPane1.setViewportView(jScrollPane2);

        jCheckBox1.setSelected(true);
        jCheckBox1.setText("Show Steps");
        jCheckBox1.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBox1ItemStateChanged(evt);
            }
        });

        jLabel1.setText("Hint: For best results, enter the same number of equations as variables you are solving for!");
        jLabel1.setEnabled(false);

        jCheckBox2.setSelected(true);
        jCheckBox2.setText("Show Hint");
        jCheckBox2.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBox2ItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(229, 229, 229)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(enterMatrixButton)
                                .addGap(44, 44, 44)
                                .addComponent(solveButton))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jCheckBox1)
                                .addGap(31, 31, 31)
                                .addComponent(jCheckBox2))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(187, 187, 187)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 382, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(146, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 281, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jCheckBox1)
                    .addComponent(jCheckBox2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 14, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(enterMatrixButton)
                    .addComponent(solveButton))
                .addGap(88, 88, 88))
        );

        jTabbedPane3.addTab("Solve System of Equations", jPanel1);

        leftTextField.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        leftTextField.setText("CH3COOH + Al(OH)3");

        rightTextField.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        rightTextField.setText("H2O + Al(CH3COO)3");

        balanceButton.setText("Balance!");
        balanceButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                balanceButtonActionPerformed(evt);
            }
        });

        jLabel2.setText("Enter the left and right sides of a chemical equation without coefficients");

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel3.setText("------->");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(52, 52, 52)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(leftTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 227, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(55, 55, 55)
                        .addComponent(jLabel3))
                    .addComponent(balanceButton)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 48, Short.MAX_VALUE)
                .addComponent(rightTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 199, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(130, 130, 130))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addComponent(jLabel2)
                .addGap(57, 57, 57)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(leftTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(rightTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addGap(51, 51, 51)
                .addComponent(balanceButton)
                .addContainerGap(270, Short.MAX_VALUE))
        );

        jTabbedPane3.addTab("Balance Chemical Equation", jPanel2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 778, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane3)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void enterMatrixButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_enterMatrixButtonActionPerformed
        // opens up the equation entering dialog box
       matrixDialog1.setVisible(true);
       matrixDialog1.setBounds(200,200,250,150);
       matrixDialog1.setLocationRelativeTo(null);
       
    }//GEN-LAST:event_enterMatrixButtonActionPerformed

    private void matrixDialog1ComponentHidden(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_matrixDialog1ComponentHidden
        //when the dialog box is closed, update the screen accordingly
        this.updatePane();
        matrixDialog1.reset();
        solveButton.setEnabled(solvable);
    }//GEN-LAST:event_matrixDialog1ComponentHidden

    private void solveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_solveButtonActionPerformed
        //try and solve the system of equations
        try{
            solveText = storedMatrix.toString() + "\n";
            storedMatrix.solve();
            updatePane();
        }catch(Exception anything){
            
        }
        solvable = false;
        solveButton.setEnabled(solvable);
    }//GEN-LAST:event_solveButtonActionPerformed

    private void balanceButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_balanceButtonActionPerformed
        //get input
        ChemEquation equation = new ChemEquation( leftTextField.getText(), rightTextField.getText());
        Matrix chemMatrix = new Matrix(equation);
        chemMatrix.solve();

        //get the raw coefficients of each compound after solving <-- can have fractions
        chemMatrix.keys.remove("constant"); //don't care about the constant because its always 0 anyway
        String eliminatedKey = chemMatrix.keys.get(0);
        Map<String, Fraction> balancedCoeff = new HashMap();
        balancedCoeff.put(eliminatedKey, new Fraction(1,1)); //set the eliminated variable as 1
        for(int i = chemMatrix.rows.size() - 1; i >= 0; i--){
            int keyNum = 1;
            Row curRow = chemMatrix.rows.get(i);
            String curKey = chemMatrix.keys.get(keyNum);
            while((curKey.equals("constant") || curRow.parts.get(curKey).getValue() == 0) && keyNum != chemMatrix.keys.size()-1){
                keyNum ++;
                curKey = chemMatrix.keys.get(keyNum);
            }
            if(curRow.parts.get(curKey).getValue() != 0){
                Fraction coeff = curRow.parts.get(eliminatedKey);
                coeff.multiplyScalar(-1);
                balancedCoeff.put(curKey, coeff);
            }
        }
        
        //now remove the fractions by multiplying denominators
        for(String key: balancedCoeff.keySet()){
            int denom = balancedCoeff.get(key).denominator;
            if(denom != 1){
                for(String keyy: balancedCoeff.keySet()){
                    Fraction f = balancedCoeff.get(keyy);
                    f.multiplyScalar(denom);
                    balancedCoeff.put(keyy, f);
                }
            }
        }
        
        String leftSide = "";
        for(String s: equation.leftSide.keySet()){
            Fraction coeff = balancedCoeff.get(s);
            if(coeff.getValue() != 1){
                leftSide += coeff;
            }
            leftSide += s + " + ";
        }
        
        String rightSide = "";
        for(String s: equation.rightSide.keySet()){
            Fraction coeff = balancedCoeff.get(s);
            if(coeff.getValue() != 1){
                rightSide += coeff;
            }
            rightSide += s + " + ";
        }
        
        //finally update the screen with the balanced chemical equation
        leftSide = leftSide.substring(0,leftSide.length()-2);
        rightSide = rightSide.substring(0,rightSide.length()-2);
        leftTextField.setText(leftSide);
        rightTextField.setText(rightSide);
        
    }//GEN-LAST:event_balanceButtonActionPerformed

    private void jCheckBox1ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBox1ItemStateChanged
        this.updatePane();
    }//GEN-LAST:event_jCheckBox1ItemStateChanged

    private void jCheckBox2ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBox2ItemStateChanged
        jLabel1.setVisible(jCheckBox2.isSelected());
    }//GEN-LAST:event_jCheckBox2ItemStateChanged

    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MatrixGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MatrixGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MatrixGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MatrixGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MatrixGUI().setVisible(true);
            }
        });
    }
    
    //update the scroll pane with new data
    public void updatePane(){
        try{
            matrixInfo = storedMatrix.toString();
        }catch(Exception e){
            matrixInfo = "";
        }
        
        if(jCheckBox1.isSelected()){
            jTextPane1.setText(solveText + "\n"  +  matrixInfo);
        }
        else{
            jTextPane1.setText(matrixInfo);
        }
        StyledDocument doc = jTextPane1.getStyledDocument();
        SimpleAttributeSet center = new SimpleAttributeSet();
        StyleConstants.setAlignment(center, StyleConstants.ALIGN_CENTER);
        doc.setParagraphAttributes(0, doc.getLength(), center, false);
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton balanceButton;
    private javax.swing.JButton enterMatrixButton;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JCheckBox jCheckBox2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTabbedPane jTabbedPane3;
    private javax.swing.JTextPane jTextPane1;
    private javax.swing.JTextField leftTextField;
    private matrixsolver.MatrixDialog matrixDialog1;
    private javax.swing.JTextField rightTextField;
    private javax.swing.JButton solveButton;
    // End of variables declaration//GEN-END:variables
}
